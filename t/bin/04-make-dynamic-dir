#!/usr/bin/env  perl
########################################################################
# housekeeping
########################################################################

use 5.006;
use strict;

use Cwd                     qw( getcwd              );
use File::Basename          qw( basename dirname    );
use File::Spec::Functions   qw( abs2rel             );
use List::MoreUtils         qw( zip                 );
use List::Util              qw( pairmap             );

use FindBin qw( $Bin );
use lib "$Bin/../lib";
use Test::KwikHaks;

########################################################################
# package variables
########################################################################

$\      = "\n";

my $sd  = Test::KwikHaks->can( 'search_bin' )
or die "Botched Test::KwikHaks: cannot 'search_bin'.\n";

my $md  = Test::KwikHaks->can( 'mkdir_if' )
or die "Botched Test::KwikHaks: cannot 'mkdir_if'.\n";

my $gv  = Test::KwikHaks->can( 'generate_versions' )
or die "Botched Test::KwikHaks: cannot 'generate_versions'.\n";

my $rm  = Test::KwikHaks->can( 'rm_rf' )
or die "Botched Test::KwikHaks: cannot 'rm_rf'.\n";

*output     = Test::KwikHaks->can( 'output' );

if( my $found = $sd->( 'dynamic' ) )
{
    $rm->( $found );
}

my $test_d      = $sd->( 't' );
my $vers_d      = $sd->( 'version' );
my $work_d      = $md->( $test_d => 'dynamic' );

my $glob        = "$test_d/bin/*_t";

########################################################################
# symlink all of the test templates to version-specific paths.
########################################################################

# two-step chdir and rm avoids stale tests.

chdir $work_d
or die "Failed chdir: $work_d, $!";

my $cwd     = getcwd;

my @testz   = glob $glob
or die "Botched $0: no files like '$glob'.\n";

output( Tests => @testz );

for my $path ( @testz )
{
    my $rel = abs2rel $path, $cwd;

    output( "Link: '$rel'." );
    
    my $base    = basename $path => '_t';
    my $pref    
    = do
    {
        my $i   = index $base, '-';
        substr $base, 0, $i;
    };

    # this might return false if there were no links, can't
    # really check it until the individual links are made --
    # that or a glob-and-loop checking each one which seems
    # like overkill...

    output( "Cleanup: '$pref-*'." );

    unlink "$pref-*.t";

    for my $perl_v ( $gv->() )
    {
        my $link    = "$base-$perl_v.t";

        output( "Symlink: $link" );

        # no telling if the previous unlink might have
        # failed for some offball reason...

        if( -e $link )
        {
            unlink $link
            or
            warn "Failed unlink: '$link', $!";
        }

        symlink $rel => $link
        or warn "Failed symlink: '$link', $!";

        -e $link
        or warn "Missing link: '$link',";

        -l $link
        or warn "Non-link: '$link',";
    }
}

exit 0;
